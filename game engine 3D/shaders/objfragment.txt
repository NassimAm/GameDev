#version 330 core

in vec3 Normal;
in vec3 FragPos;
in vec2 TextCoords;
in float visibility;

out vec4 FragColor;

struct DirLight
{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform vec3 ViewPos;
uniform DirLight sun;
uniform sampler2D objtexture;

vec4 CalculateDirLight(DirLight dirlight,vec3 CameraDir,vec3 NormalVec,vec4 emissiontexture);

void main()
{
	vec4 result;
	vec3 ViewDir = normalize(ViewPos-FragPos);
	vec3 norm = normalize(Normal);
	vec4 maintexture = texture(objtexture,TextCoords);

	result = CalculateDirLight(sun,ViewDir,norm,maintexture);
	
	FragColor = result;
	FragColor = mix(vec4(0.6f,0.6f,1.0f,1.0f),FragColor,visibility);
	if(FragColor.a<0.1f)
		discard;
}

vec4 CalculateDirLight(DirLight dirlight,vec3 CameraDir,vec3 NormalVec,vec4 emissiontexture)
{
	vec3 LightDir = normalize(-dirlight.direction);	

	float diff = max(dot(NormalVec,LightDir),0.0f); 
	vec3 reflection = reflect(-LightDir,NormalVec); 
	float spec = pow(max(dot(CameraDir,reflection),0.0f),32.0f);
	
	vec4 ambient = vec4(dirlight.ambient,1.0) * emissiontexture; 
	vec4 diffuse = diff * vec4(dirlight.diffuse,1.0) * emissiontexture;
	vec4 specular = spec * vec4(dirlight.specular,1.0) * vec4(1.0);

	return ambient+diffuse+specular;
}