#version 330 core

in vec4 clipSpace;
in vec2 TextCoords;
in vec3 toCameraVec;
out vec4 FragColor;

struct DirLight
{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform DirLight sun;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform float moveFactor;
uniform float near;
uniform float far;

const float waveStrength = 0.01;

vec3 CalculateDirLight(DirLight dirlight,vec3 CameraDir,vec3 NormalVec,vec4 emissiontexture,float waterDepth);

void main()
{
	vec2 DCoords = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 refractionCoords = vec2(DCoords.x,DCoords.y);
	vec2 reflectionCoords = vec2(DCoords.x,-DCoords.y);

	float depth = texture(depthMap,refractionCoords).r;
	float floordistance = 2.0 * near * far /(far + near - (2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float waterdistance = 2.0 * near * far /(far + near - (2.0 * depth - 1.0) * (far - near));
	
	float waterDepth = floordistance - waterdistance;

	vec2 distortedTexCoords = texture(dudvMap, vec2(TextCoords.x + moveFactor, TextCoords.y)).rg*0.1;
	distortedTexCoords = TextCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
	vec2 totaldistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength;

	refractionCoords += totaldistortion;
	refractionCoords = clamp(refractionCoords,0.001,0.999);

	reflectionCoords += totaldistortion;
	reflectionCoords.x = clamp(reflectionCoords.x,0.001,0.999);
	reflectionCoords.y = clamp(reflectionCoords.y,-0.999,-0.001);	

	vec4 ReflectionColor = texture(reflectionTexture,reflectionCoords);
	vec4 RefractionColor = texture(refractionTexture,refractionCoords);

	vec3 tocameravec = normalize(toCameraVec);
	float refractivefactor = dot(tocameravec,vec3(0.0,1.0,0.0));
	refractivefactor = pow(refractivefactor,0.3);

	vec4 NormalColor = texture(normalMap,distortedTexCoords);
	vec3 normal = vec3(NormalColor.r * 2.0 - 1.0,NormalColor.b,NormalColor.g * 2.0 - 1.0);
	
	FragColor = mix(ReflectionColor,RefractionColor,refractivefactor);
	FragColor = mix(FragColor,vec4(0.0,0.3,0.5,1.0),0.2);
	vec3 lightCalc = CalculateDirLight(sun,tocameravec,normal,FragColor,waterDepth);
	FragColor = vec4(lightCalc,1.0);
	FragColor.a = clamp(waterDepth/5.0,0.0,1.0);
}
vec3 CalculateDirLight(DirLight dirlight,vec3 CameraDir,vec3 NormalVec,vec4 emissiontexture,float waterDepth)
{
	vec3 LightDir = normalize(-dirlight.direction);	

	float diff = max(dot(NormalVec,LightDir),0.0f); 
	vec3 reflection = reflect(-LightDir,NormalVec); 
	float spec = pow(max(dot(CameraDir,reflection),0.0f),20.0f);
	
	vec3 ambient = dirlight.ambient * vec3(emissiontexture); 
	vec3 diffuse = diff * dirlight.diffuse * vec3(emissiontexture);
	vec3 specular = spec * dirlight.specular * vec3(1.0) * clamp(waterDepth/20.0,0.0,1.0);

	return ambient+diffuse+specular;
}